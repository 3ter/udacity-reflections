What happens when you initialize a repository? Why do you need to do it?
    
    The hidden folder .git is included in the directory. This is needed
    to track the files in the directory and the following commits. The
    nice shell zsh immediately knows to apply git-mechanics on a folder
    if it has been initialized.

How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area is the intermediary in the situation. There we can
    bundle up files for one single commit. I think it helps to choose
    wisely what to add when. I am not sure why it is superior to just
    allowing "git commit" accepting multiple arguments. 

How can you use the staging area to make sure you have one commit per logical change?

    After staging my file(s) I can still check the staged file(s)
    against the latest commit in the repository with the --staged
    option. Diff is great. With git status I always can see what changes
    I want to commit.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

    Just like in this game there could be a change in a project, that
    makes a different design choice than the main branch. For example a
    game could change its graphic style, but some people want to pursue
    the old graphic style and then it's branched into to lines of
    development. It's helpful to have this possibility, because then
    it's possible to experiment and still have a clean distinction
    between the (clearly) labelled branches.
